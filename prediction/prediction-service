#!/usr/bin/env python
# Copyright (C) 2004-2006 Red Hat Inc. <http://www.redhat.com/>
# Copyright (C) 2005-2007 Collabora Ltd. <http://www.collabora.co.uk/>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import gobject

import dbus
import dbus.service
import dbus.mainloop.glib

import lm

from contextlib import contextmanager
@contextmanager
def timeit(s):
    import gc, time
    gc.collect()
    gc.collect()
    gc.collect()
    t = time.time()
    yield None
    print "time: %fms%s" % ((time.time() - t)*1000, " for "+s if s else "")


class DemoException(dbus.DBusException):
    _dbus_error_name = 'com.example.DemoException'

class SomeObject(dbus.service.Object):

    def get_models(self, lm_ids):
        models = []
        for lm_id in lm_ids:
            if lm_id in language_models:
                model = language_models[lm_id]
            else:
                model = lm.LanguageModelDynamic()
                filename = "%s.lm" % lm_id
                print "loading %s" % filename
                model.load(filename)
                language_models[lm_id] = model
            models.append(model)
        return models
        
    @dbus.service.method("com.example.SampleInterface",
                         in_signature='asasi', out_signature='as')
    def Predict(self, lm_ids, context, limit):
        models = self.get_models(lm_ids)
        if models:    
            with timeit("server calling predict"):
                return models[0].predict(context, limit)
        return []

    @dbus.service.method("com.example.SampleInterface",
                         in_signature='asasi', out_signature='a(sd)')
    def Predictp(self, lm_ids, context, limit):
        models = self.get_models(lm_ids)
        if models:    
            with timeit("server calling predict"):
                return models[0].predictp(context, limit)
        return []

    @dbus.service.method("com.example.SampleInterface",
                         in_signature='', out_signature='')
    def RaiseException(self):
        raise DemoException('The RaiseException method does what you might '
                            'expect')

    @dbus.service.method("com.example.SampleInterface",
                         in_signature='', out_signature='')
    def Exit(self):
        mainloop.quit()


if __name__ == '__main__':

    # D-Bus init
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    session_bus = dbus.SessionBus()
    name = dbus.service.BusName("com.example.SampleService", session_bus)
    object = SomeObject(session_bus, '/SomeObject')

    # cache of language models
    language_models = {}

    mainloop = gobject.MainLoop()
    print "Running example service."
    mainloop.run()

