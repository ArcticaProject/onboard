#!/usr/bin/python3
# -*- coding: utf-8 -*-
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: marmuta <marmvta@gmail.com>
#

import sys
from optparse import OptionParser

from pypredict import *

def main():
    global model # for debugging

    parser = OptionParser(usage="Usage: %prog [options] corpus model")
    parser.add_option("-o", "--order", type="int", dest="order", default=3,
              help="order of the language model, defaults to 3")
    parser.add_option("-q", "--quiet",
              action="store_true", dest="quiet", default=False,
              help="only show the final summary")
    parser.add_option("-v", "--vocabulary", type="str", dest="vocabulary_file",
        help="list of words to consider during model creation")
    options, args = parser.parse_args()

    out = None if options.quiet else sys.stdout
    vocabulary = read_vocabulary(options.vocabulary_file) \
                 if options.vocabulary_file else None

    model = DynamicModel()
    model.order = options.order

    with timeit("read_corpus", out):
        text = read_corpus(args[0])

    with timeit("tokenize_text", out):
        tokens, spans = tokenize_text(text)

    if vocabulary:
        with timeit("filter_tokens", out):
            tokens = filter_tokens(tokens, vocabulary)

    with timeit("learn_tokens", out):
        model.learn_tokens(tokens)

    with timeit("save", out):
        model.save(args[1])

    counts, totals = model.get_counts()
    for i,c in enumerate(counts):
        sys.stdout.write("%d-grams: types %10d, occurences %10d\n" % \
              (i+1, counts[i], totals[i]))

if __name__ == '__main__':
    main()

