#!/usr/bin/python3
# -*- coding: utf-8 -*-
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: marmuta <marmvta@gmail.com>
#
# Calculate keystroke saving rate
# -------------------------------
#
# Based on:
# "EFFECTS OF NGRAM ORDER AND TRAINING TEXT SIZE ON WORD PREDICTION"
# by Gregory W. Lesher, Ph.D., Bryan J. Moulton, M.S., and D. Jeffery
# Higginbotham, Ph.D.
#
# Usage:
# ksr <language model> <typed text> <prediction limit>
# Calculates the number of keystrokes saved with a maximum number of
# <prediction limit> predictions to choose from when typing <typed text>.
#
# Example:
# split_corpus moby.txt
# train training.txt 3 moby.lm
# ksr moby.lm testing.txt 10
# This loads language model moby.lm, uses it to create at most 10 predicted
# words per typed letter and simulates the typing of testing.txt.
#

import sys, re, codecs, math
from pypredict import *

def main():
    model = DynamicModel()
    with timeit("loading model"):
        model.load(sys.argv[1])
    sentences = split_sentences(read_corpus(sys.argv[2]))
    prediction_limit = int(sys.argv[3])

    total_chars, pressed_keys = simulate_typing(model, None, sentences, prediction_limit, progress)
    #print get_stat_string(total_chars, pressed_keys)


def get_stat_string(total_chars, pressed_keys):
    saved_keystrokes = total_chars - pressed_keys
    ksr = saved_keystrokes * 100.0 / total_chars if total_chars else 0
    return "characters %8d, keystrokes %8d, " \
           "saved %8d, ksr %6.2f%%" \
           % (total_chars, pressed_keys, saved_keystrokes, ksr)


def progress(i, n, total_chars, pressed_keys):
    # progress feedback
    if i == 0 or i == n-1 or (i+1) % 50 == 0:
        print "sentence %6d of %6d: %s" % \
           (i+1, n, get_stat_string(total_chars, pressed_keys))


if __name__ == '__main__':
    main()

